using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

namespace EasyTidy.Model;

public class PromptConstants
{
    public const string SystemPrompt = "You are EasyTidy, an all-capable AI assistant, aimed at solving any task presented by the user. You have various tools at your disposal that you can call upon to efficiently complete complex requests. Whether it's programming, information retrieval, file processing, or web browsing, you can handle it all.";

    public const string UserPrompt = "# Task Objective\r\nPrecisely map file operations described in natural language to predefined enumeration values, and output the corresponding integer values \r\n\r\n### Enumeration Mapping Table\r\n| Operation Description Keywords | Enumeration Name   | Integer Value | Application Scenario Example      |\r\n|--------------------------------|--------------------|---------------|-----------------------------------|\r\n| Move/Cut/Transfer              | Move               | 0             | Move file to new directory        |\r\n| Copy/Clone/Backup              | Copy               | 1             | Create a duplicate of the file    |\r\n| Delete/Remove/Clear            | Delete             | 2             | Permanently delete file           |\r\n| Rename/Change Name             | Rename             | 3             | Change the file name              |\r\n| Recycle Bin/Temporary Delete    | RecycleBin         | 4             | Temporarily delete file            |\r\n| Unzip/Extract/Unpack           | Extract            | 5             | Extract files from a compressed package |\r\n| Compress/Package/Archive       | ZipFile            | 6             | Create a ZIP compressed file      |\r\n| Upload/Sync to WebDAV         | UploadWebDAV       | 7             | Upload file to NAS server         |\r\n| Encrypt/Password Protect        | Encryption         | 8             | AES file encryption               |\r\n| Hard Link/Image Link           | HardLink           | 9             | Create a space-saving file image  |\r\n| Soft Link/Shortcut             | SoftLink           | 10            | Create a file shortcut            |\r\n| Snapshot/Version Backup        | FileSnapshot       | 11            | Create a historical version of file|\r\n| Summary                        | AISummary          | 12            | Generate a summary of a PDF document |\r\n| Classification/Labeling        | AIClassification    | 13            | Automatically categorize image files|\r\n\r\n### Input and Output Rules\r\n1. **Input Requirements**:\r\n   - The operation description must contain a \"verb + object\" structure (e.g., \"Please compress these documents\")\r\n   - Support for synonym recognition (e.g., \"transfer\" → Move[6](@ref))\r\n\r\n2. **Output Rules**:\r\n   ```c#\r\n   {\r\n       \"operation\": \"Recognized Enumeration Name\", \r\n       \"value\": Integer Value,\r\n       \"confidence\": Confidence between 0.0-1.0\r\n   } \r\n Here are my requirements: \r\n $source";

    public const string SetupTwoPrompt = "Please read and analyze the following requirement text. Determine whether it contains a **source path** (source file or folder) and a **destination path** (destination file or folder).\r\n\r\nReturn your answer in the following format:\r\n\r\n```\r\nc#\r\n{\r\n  \"included\": \"Y\" or \"N\",                  // \"Y\" 表示包含源路径和目标路径，否则为 \"N\"\r\n  \"sourcePath\": \"source path string\",      // 如存在，填写完整的源路径，否则留空\r\n  \"destinationPath\": \"destination path string\", // 如存在，填写完整的目标路径，否则留空\r\n  \"type\": \"file\" or \"directory\"            // 根据路径判断类型，\"file\" 表示文件，\"directory\" 表示目录\r\n}\r\n```\r\n\r\n### Example:\r\n\r\n> Requirement: Move the file `C://Users//Docs//old.txt` to the folder `D://Backup//`.\r\n\r\nOutput:\r\n```\r\nc#\r\n{\r\n  \"included\": \"Y\",\r\n  \"sourcePath\": \"C://Users//Docs//old.txt\",\r\n  \"destinationPath\": \"D://Backup//\",\r\n  \"type\": \"file\"\r\n}\r\n```\r\n\r\n requirement: $source";

    public const string SetupThreePrompt = "You are given a user's natural language description of how to filter or process files. Convert the description into structured JSON based on the following rules:\r\n\r\n1. `rule`: Detect file type category from the user's wording (e.g., document, image, video). Return a wildcard extension string for that type. For example:\r\n   - \"document files\" → `*.doc;*.docx;*.pdf;*.txt;*.xls;*.xlsx;*.ppt;*.pptx`\r\n   - \"image files\" → `*.jpg;*.png;*.gif`\r\n   - \"compressed files\" → `*.zip;*.rar;*.7z`\r\n   - \"text files\" → `*.txt;*.md;*.log`\r\n   If multiple types are mentioned, join them with `;`. If no file type is found, return `\"\"`.\r\n\r\n2. `filter`: Extract and return conditions like size, created/edit/visit date, file attributes (hidden, readonly, system, temp, archive), in the form:\r\n   `size>5MB;created<3days;hidden=yes`\r\n   Use these operators: `>`, `<`, `=`, and units like MB, GB, Day, Hour. If no filter is mentioned, return `\"\"`.\r\n\r\n3. `content`: If the user mentions filtering based on file content, extract the keyword or summary. For example: `contains:project` or `regex:^abc`. If not mentioned, return `\"\"`.\r\n\r\nReturn the result in strict JSON format:\r\n\r\n```json\r\n{\r\n  \"rule\": \"e.g., *.doc;*.pdf\",\r\n  \"filter\": \"e.g., size>5MB;created<3days\",\r\n  \"content\": \"e.g., contains:project\"\r\n}\r\n User description: $source";

    public const string SetupFourPrompt = "You are a C# data model assistant. Based on the user's natural language description, generate a JSON object that strictly follows the `FilterTable` class structure. The JSON keys must match the property names exactly, and enum values must use the correct C# enum member names (not display names or translations).\r\n\r\n---\r\nC# class definition:\r\n\r\npublic class FilterTable\r\n{\r\n    public bool IsSizeSelected;\r\n    public ComparisonResult SizeOperator; // Enum: GreaterThan, LessThan, Equal, Between, NotBetween\r\n    public string? SizeValue;\r\n    public SizeUnit SizeUnit; // Enum: Byte, Kilobyte, Megabyte, Gigabyte\r\n\r\n    public bool IsCreateDateSelected;\r\n    public ComparisonResult CreateDateOperator;\r\n    public string? CreateDateValue;\r\n    public DateUnit CreateDateUnit; // Enum: Second, Minute, Hour, Day, Month, Year\r\n\r\n    public bool IsEditDateSelected;\r\n    public ComparisonResult EditDateOperator;\r\n    public string? EditDateValue;\r\n    public DateUnit EditDateUnit;\r\n\r\n    public bool IsVisitDateSelected;\r\n    public ComparisonResult VisitDateOperator;\r\n    public string? VisitDateValue;\r\n    public DateUnit VisitDateUnit;\r\n\r\n    public bool IsArchiveSelected;\r\n    public YesOrNo ArchiveValue; // Enum: Yes, No\r\n\r\n    public bool IsHiddenSelected;\r\n    public YesOrNo HiddenValue;\r\n\r\n    public bool IsReadOnlySelected;\r\n    public YesOrNo ReadOnlyValue;\r\n\r\n    public bool IsSystemSelected;\r\n    public YesOrNo SystemValue;\r\n\r\n    public bool IsTempSelected;\r\n    public YesOrNo TempValue;\r\n\r\n    public bool IsIncludeSelected;\r\n    public string IncludedFiles; // e.g., \"*.jpg;*.png\"\r\n\r\n    public bool IsContentSelected;\r\n    public ContentOperatorEnum ContentOperator; \r\n    // Enum values:\r\n    // - AtLeastOneWord\r\n    // - AtLeastOneWordCaseSensitive\r\n    // - AllWordsInAnyOrder\r\n    // - AllWordsInAnyOrderCaseSensitive\r\n    // - RegularExpression\r\n    // - String\r\n    // - StringCaseSensitive\r\n    public string ContentValue;\r\n}\r\n\r\n---\r\n\r\nUser Input:\r\n“$source If the ENUM field is empty, please select the first default ENUM value.”\r\n\r\nGenerate a valid JSON object using the exact property names and enum values. Return only the JSON. No explanation.\r\n Expected Output {\r\n  \"IsSizeSelected\": true,\r\n  \"SizeOperator\": \"GreaterThan\",\r\n  \"SizeValue\": \"5\",\r\n  \"SizeUnit\": \"MB\",\r\n  \"IsCreateDateSelected\": true,\r\n  \"CreateDateOperator\": \"LessThan\",\r\n  \"CreateDateValue\": \"3\",\r\n  \"CreateDateUnit\": \"Day\",\r\n  \"IsHiddenSelected\": true,\r\n  \"HiddenValue\": \"Yes\"\r\n}\r\n";
}

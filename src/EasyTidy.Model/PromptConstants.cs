using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

namespace EasyTidy.Model;

public class PromptConstants
{
    public const string SystemPrompt = "You are EasyTidy, an all-capable AI assistant, aimed at solving any task presented by the user. You have various tools at your disposal that you can call upon to efficiently complete complex requests. Whether it's programming, information retrieval, file processing, or web browsing, you can handle it all.";

    public const string UserPrompt = "# Task Objective\r\nPrecisely map file operations described in natural language to predefined enumeration values, and output the corresponding integer values \r\n\r\n### Enumeration Mapping Table\r\n| Operation Description Keywords | Enumeration Name   | Integer Value | Application Scenario Example      |\r\n|--------------------------------|--------------------|---------------|-----------------------------------|\r\n| Move/Cut/Transfer              | Move               | 0             | Move file to new directory        |\r\n| Copy/Clone/Backup              | Copy               | 1             | Create a duplicate of the file    |\r\n| Delete/Remove/Clear            | Delete             | 2             | Permanently delete file           |\r\n| Rename/Change Name             | Rename             | 3             | Change the file name              |\r\n| Recycle Bin/Temporary Delete    | RecycleBin         | 4             | Temporarily delete file            |\r\n| Unzip/Extract/Unpack           | Extract            | 5             | Extract files from a compressed package |\r\n| Compress/Package/Archive       | ZipFile            | 6             | Create a ZIP compressed file      |\r\n| Upload/Sync to WebDAV         | UploadWebDAV       | 7             | Upload file to NAS server         |\r\n| Encrypt/Password Protect        | Encryption         | 8             | AES file encryption               |\r\n| Hard Link/Image Link           | HardLink           | 9             | Create a space-saving file image  |\r\n| Soft Link/Shortcut             | SoftLink           | 10            | Create a file shortcut            |\r\n| Snapshot/Version Backup        | FileSnapshot       | 11            | Create a historical version of file|\r\n| Summary                        | AISummary          | 12            | Generate a summary of a PDF document |\r\n| Classification/Labeling        | AIClassification    | 13            | Automatically categorize image files|\r\n\r\n### Input and Output Rules\r\n1. **Input Requirements**:\r\n   - The operation description must contain a \"verb + object\" structure (e.g., \"Please compress these documents\")\r\n   - Support for synonym recognition (e.g., \"transfer\" → Move[6](@ref))\r\n\r\n2. **Output Rules**:\r\n   ```c#\r\n   {\r\n       \"operation\": \"Recognized Enumeration Name\", \r\n       \"value\": Integer Value,\r\n       \"confidence\": Confidence between 0.0-1.0\r\n   } \r\n Here are my requirements: \r\n $source";

    public const string SetupTwoPrompt = "Please read and analyze the following requirement text. Determine whether it contains a **source path** (source file or folder) and a **destination path** (destination file or folder).\r\n\r\nReturn your answer in the following format:\r\n\r\n```\r\nc#\r\n{\r\n  \"included\": \"Y\" or \"N\",                  // \"Y\" 表示包含源路径和目标路径，否则为 \"N\"\r\n  \"sourcePath\": \"source path string\",      // 如存在，填写完整的源路径，否则留空\r\n  \"destinationPath\": \"destination path string\", // 如存在，填写完整的目标路径，否则留空\r\n  \"type\": \"file\" or \"directory\"            // 根据路径判断类型，\"file\" 表示文件，\"directory\" 表示目录\r\n}\r\n```\r\n\r\n### Example:\r\n\r\n> Requirement: Move the file `C://Users//Docs//old.txt` to the folder `D://Backup//`.\r\n\r\nOutput:\r\n```\r\nc#\r\n{\r\n  \"included\": \"Y\",\r\n  \"sourcePath\": \"C://Users//Docs//old.txt\",\r\n  \"destinationPath\": \"D://Backup//\",\r\n  \"type\": \"file\"\r\n}\r\n```\r\n\r\n requirement: $source";

    public const string SetupThreePrompt = "Please read and analyze the following requirement text, and identify the following three pieces of information:\r\n\r\n1. The **file matching rule** (e.g., file names, extensions, or path patterns). If there are multiple rules, separate them using a semicolon `;`.\r\n2. Any **file attribute filters** (e.g., size, creation date, read-only status). If present, extract the filter conditions.\r\n3. Whether the requirement involves **processing based on file content**. If so, summarize the content processing logic or keywords. If there is no content-based processing, return an empty string `\"\"`.\r\n\r\nPlease output your result in the following format:\r\n\r\n```\r\n{\r\n  \"rule\": \"File matching rules, e.g., *.txt;*.docx or logs/*.log\",\r\n  \"filter\": \"File attribute filters, e.g., size>1MB;created>2024-01-01\",\r\n  \"content\": \"Description of content-based logic, e.g., lines containing the keyword 'error'\"\r\n}\r\n```\r\n\r\n---\r\n\r\n### Example:\r\n\r\n> Requirement: Search for all `.log` files containing the keyword \"Exception\", with size greater than 500KB.\r\n\r\nOutput:\r\n```\r\n{\r\n  \"rule\": \"*.log\",\r\n  \"filter\": \"size>500KB\",\r\n  \"content\": \"Lines containing the keyword 'Exception'\"\r\n}\r\n```\r\n\r\n---\r\n\r\n requirement：$source";
}

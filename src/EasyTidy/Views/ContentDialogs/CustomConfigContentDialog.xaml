<?xml version="1.0" encoding="utf-8"?>
<ContentDialog
    x:Class="EasyTidy.Views.ContentDialogs.CustomConfigContentDialog"
    xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
    xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
    xmlns:local="using:EasyTidy.Views.ContentDialogs"
    xmlns:d="http://schemas.microsoft.com/expression/blend/2008"
    xmlns:mc="http://schemas.openxmlformats.org/markup-compatibility/2006"
    xmlns:etc="using:EasyTidy.Views.UserControls"
    xmlns:model="using:EasyTidy.Model"
    xmlns:ui="using:CommunityToolkit.WinUI"
    mc:Ignorable="d"
    CornerRadius="{ThemeResource OverlayCornerRadius}"
    DefaultButton="Primary"
    SecondaryButtonClick="CustomContentDialog_SecondaryButtonClick">

    <StackPanel>
        <!-- <StackPanel Orientation="Horizontal"
                    Spacing="8">
            <TextBlock x:Uid="SelectTaskBlock"
                       Margin="0,5,0,0"
                       Width="140"/>
            <StackPanel HorizontalAlignment="Left"
                        Orientation="Horizontal"
                        Spacing="8">
                <Button x:Name="CustomTaskList"
                        x:Uid="SingleTask"
                        Command="{x:Bind ViewModel.CustomSelectTaskCommand}"
                        HorizontalAlignment="Right"
                        CommandParameter="{Binding ElementName=CustomTaskList}">
                    <Button.Resources>
                        <TeachingTip x:Name="CustomTaskSelect"
                                     x:Uid="TaskList"
                                     Target="{x:Bind CustomTaskList}"
                                     IsOpen="{x:Bind ViewModel.CustomIsOpen, Mode=TwoWay, UpdateSourceTrigger=PropertyChanged}"
                                     PreferredPlacement="Bottom"
                                     CloseButtonClick="CustomTaskSelect_CloseButtonClick">
                            <TeachingTip.HeroContent>
                                <ListView x:Name="CustomListView"
                                          SelectionMode="Multiple"
                                          MaxHeight="320"
                                          ItemsSource="{x:Bind ViewModel.TaskListACV, Mode=TwoWay}">
                                    <ListView.ItemTemplate>
                                        <DataTemplate x:DataType="model:TaskOrchestrationTable">
                                            <TextBlock Text="{x:Bind TaskName}"/>
                                        </DataTemplate>
                                    </ListView.ItemTemplate>
                                </ListView>
                            </TeachingTip.HeroContent>
                        </TeachingTip>
                    </Button.Resources>
                </Button>
            </StackPanel>
        </StackPanel> -->
        <StackPanel Orientation="Horizontal"
                    Spacing="8"
                    Margin="0,10,0,0">
            <TextBlock x:Uid="FileChangeBlock"
                       Margin="0,30,0,0"
                       Width="140"
                       TextWrapping="Wrap"/>
            <ToggleSwitch IsOn="{x:Bind ViewModel.CustomFileChange, Mode=TwoWay, UpdateSourceTrigger=PropertyChanged}"
                          Margin="0,22,0,0"
                          Width="100"
                          Toggled="ToggleSwitch_Toggled"/>
            <TextBox x:Name="DelayBox"
                     x:Uid="FileChangeDelayText"
                     IsEnabled="{x:Bind ViewModel.CustomFileChange, Mode=TwoWay, UpdateSourceTrigger=PropertyChanged}"
                     Margin="-60,0,0,0"
                     MinWidth="160"
                     Text="{x:Bind Delay, Mode=TwoWay}"
                     ui:TextBoxExtensions.Regex="^\d+$"
                     ui:TextBoxExtensions.IsValid="{x:Bind IsValid, Mode=TwoWay}"/>
        </StackPanel>
        <TextBlock Foreground="{ThemeResource SystemFillColorCriticalBrush}"
                   x:Name="DelayValid"
                   Margin="250,0,0,0"
                   Text=""
                   Visibility="Collapsed"/>
        <StackPanel Orientation="Horizontal"
                    Spacing="8">
            <TextBlock x:Uid="DialogAtStartup"
                       Margin="0,30,0,0"
                       Width="140"/>
            <ToggleSwitch IsOn="{x:Bind ViewModel.CustomStartupExecution, Mode=TwoWay, UpdateSourceTrigger=PropertyChanged}"
                          Width="100"
                          Margin="0,22,0,0"/>
        </StackPanel>
        <StackPanel Orientation="Horizontal"
                    Spacing="8">
            <TextBlock x:Uid="RegularTaskRunningText"
                       Margin="0,30,0,0"
                       Width="140"/>
            <ToggleSwitch IsOn="{x:Bind ViewModel.CustomRegularTaskRunning, Mode=TwoWay, UpdateSourceTrigger=PropertyChanged}"
                          Margin="0,22,0,0"
                          Width="100"/>
            <TimePicker x:Name="SelectedTimePicker"
                        ClockIdentifier="24HourClock"
                        x:Uid="DialogRegularTaskRunningTime"
                        IsEnabled="{x:Bind ViewModel.CustomRegularTaskRunning, Mode=TwoWay, UpdateSourceTrigger=PropertyChanged}"
                        Margin="-60,0,0,0"
                        SelectedTime="{x:Bind SelectedTime, Mode=TwoWay, UpdateSourceTrigger=PropertyChanged}"/>
        </StackPanel>
        <etc:Divider/>
        <StackPanel Orientation="Horizontal"
                    Spacing="8"
                    Margin="0,-8,0,0">
            <TextBlock x:Uid="DialogAsPlanned"
                       Width="140"/>
        </StackPanel>
        <StackPanel>
            <StackPanel>
                <StackPanel Orientation="Horizontal"
                            Spacing="20"
                            Margin="0,10,0,0">
                    <TextBlock x:Uid="DialogMinute"
                               Margin="0,5,0,0"
                               Width="140"
                               TextWrapping="Wrap"/>
                    <TextBox x:Name="MinuteBox"
                             MinWidth="180"
                             Text="{x:Bind Minute, Mode=TwoWay}"
                             ui:TextBoxExtensions.Regex="^([1-9]|[1-5][0-9])(?:,([1-9]|[1-5][0-9]))*$"
                             ui:TextBoxExtensions.IsValid="{x:Bind IsValid, Mode=TwoWay}"/>
                    <TextBlock Text="(0 to 59)"/>
                </StackPanel>
                <TextBlock Foreground="{ThemeResource SystemFillColorCriticalBrush}"
                           x:Name="MinuteValid"
                           Margin="160,0,0,0"
                           Text=""
                           Visibility="Collapsed"/>
                <StackPanel Orientation="Horizontal"
                            Margin="0,10,0,0"
                            Spacing="20">
                    <TextBlock x:Uid="DialogHour"
                               Margin="0,5,0,0"
                               Width="140"
                               TextWrapping="Wrap"/>
                    <TextBox x:Name="HourBox"
                             MinWidth="180"
                             Text="{x:Bind Hour, Mode=TwoWay}"
                             ui:TextBoxExtensions.Regex="^(2[0-3]|[01]?[0-9])(,(2[0-3]|[01]?[0-9]))*$"
                             ui:TextBoxExtensions.IsValid="{x:Bind IsValid, Mode=TwoWay}"/>
                    <TextBlock Text="(0 to 23)"/>
                </StackPanel>
                <TextBlock Foreground="{ThemeResource SystemFillColorCriticalBrush}"
                           x:Name="HourValid"
                           Margin="160,0,0,0"
                           Visibility="Collapsed"/>
                <StackPanel Orientation="Horizontal"
                            Spacing="20"
                            Margin="0,10,0,0">
                    <TextBlock x:Uid="DialogWeek"
                               Margin="0,5,0,0"
                               Width="140"
                               TextWrapping="Wrap"/>
                    <TextBox x:Name="DayOfWeekBox"
                             MinWidth="180"
                             Text="{x:Bind DayOfWeek, Mode=TwoWay}"
                             ui:TextBoxExtensions.Regex="^(0|1|2|3|4|5|6)(,(0|1|2|3|4|5|6))*$"
                             ui:TextBoxExtensions.IsValid="{x:Bind IsValid, Mode=TwoWay}"/>
                    <TextBlock x:Uid="DialogDayOfWeekBlock"/>
                </StackPanel>
                <TextBlock Foreground="{ThemeResource SystemFillColorCriticalBrush}"
                           x:Name="DayOfWeekValid"
                           Margin="160,0,0,0"
                           Visibility="Collapsed"/>
                <StackPanel Orientation="Horizontal"
                            Spacing="20"
                            Margin="0,10,0,0">
                    <TextBlock x:Uid="DialogDayOfMonth"
                               Margin="0,5,0,0"
                               Width="140"
                               TextWrapping="Wrap"/>
                    <TextBox x:Name="DayOfMonthBox"
                             MinWidth="180"
                             Text="{x:Bind DayOfMonth, Mode=TwoWay}"
                             ui:TextBoxExtensions.Regex="^(31|30|[12][0-9]|1?[1-9])(,(31|30|[12][0-9]|1?[1-9]))*$"
                             ui:TextBoxExtensions.IsValid="{x:Bind IsValid, Mode=TwoWay}"/>
                    <TextBlock Text="(1 to 31)"/>
                </StackPanel>
                <TextBlock Foreground="{ThemeResource SystemFillColorCriticalBrush}"
                           x:Name="DayOfMonthValid"
                           Margin="160,0,0,0"
                           Visibility="Collapsed"/>
                <StackPanel Orientation="Horizontal"
                            Spacing="20"
                            Margin="0,10,0,0">
                    <TextBlock x:Uid="DialogMonth"
                               Margin="0,5,0,0"
                               Width="140"
                               TextWrapping="Wrap"/>
                    <TextBox x:Name="MonthlyDayBox"
                             MinWidth="180"
                             Text="{x:Bind MonthlyDay, Mode=TwoWay}"
                             ui:TextBoxExtensions.Regex="^(1|2|3|4|5|6|7|8|9|10|11|12)(,(1|2|3|4|5|6|7|8|9|10|11|12))*$"
                             ui:TextBoxExtensions.IsValid="{x:Bind IsValid, Mode=TwoWay}"/>
                    <TextBlock Text="(1 to 12)"/>
                </StackPanel>
                <TextBlock Foreground="{ThemeResource SystemFillColorCriticalBrush}"
                           x:Name="MonthlyDayValid"
                           Margin="160,0,0,0"
                           Visibility="Collapsed"/>
                <etc:Divider/>
                <StackPanel Orientation="Horizontal"
                            Spacing="20">
                    <TextBlock x:Uid="DialogExpression"
                               Margin="0,5,0,0"
                               Width="140"
                               TextWrapping="Wrap"/>
                    <TextBox x:Name="ExpressionBox"
                             MinWidth="180"
                             Height="32"
                             Margin="0,-32,0,0"
                             Text="{x:Bind Expression, Mode=TwoWay}"
                             ui:TextBoxExtensions.Regex="^(\*|([0-5]?[0-9]|([0-5]?[0-9]-[0-5]?[0-9])|(\*/[0-5]?[0-9])|([0-5]?[0-9](,[0-5]?[0-9])*)?)) (\*|([0-5]?[0-9]|([0-5]?[0-9]-[0-5]?[0-9])|(\*/[0-5]?[0-9])|([0-5]?[0-9](,[0-5]?[0-9])*)?)) (\*|(0?[1-9]|[12][0-9]|3[01]|([12][0-9]-[3][01])|(\*/[1-9])|([0-9](,[0-9])*)?)) (\*|(0?[1-9]|1[0-2]|([01]?[0-2]-[01]?[0-9])|(\*/[1-9])|([0-9](,[0-9])*)?)) (\*|[0-6]|([0-6]-[0-6])|(\*/[0-6])|([0-6](,[0-6])*)?)$"
                             ui:TextBoxExtensions.IsValid="{x:Bind IsValid, Mode=TwoWay}"/>
                    <TextBlock Height="48"
                               Margin="8"/>
                </StackPanel>
                <TextBlock Foreground="{ThemeResource SystemFillColorCriticalBrush}"
                           x:Name="ExpressionValid"
                           Margin="160,0,0,0"
                           Visibility="Collapsed"/>
                <TeachingTip x:Name="CustomPlanTeachingTip"
                             PreferredPlacement="Center"
                             x:Uid="ExecutionDate">
                    <TeachingTip.HeroContent>
                        <ListView x:Name="PlanListView"
                                  ItemsSource="{x:Bind ViewModel.FireTimes, Mode=TwoWay, UpdateSourceTrigger=PropertyChanged}"
                                  SelectionMode="None"
                                  HorizontalContentAlignment="Center"
                                  HorizontalAlignment="Center"/>
                    </TeachingTip.HeroContent>
                </TeachingTip>
            </StackPanel>
        </StackPanel>
    </StackPanel>
</ContentDialog>

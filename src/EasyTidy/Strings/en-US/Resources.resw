<?xml version="1.0" encoding="utf-8"?>
<root>
  <!--
    Microsoft ResX Schema

    Version 2.0

    The primary goals of this format is to allow a simple XML format
    that is mostly human readable. The generation and parsing of the
    various data types are done through the TypeConverter classes
    associated with the data types.

    Example:

    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>

    There are any number of "resheader" rows that contain simple
    name/value pairs.

    Each data row contains a name, and value. The row also contains a
    type or mimetype. Type corresponds to a .NET class that support
    text/value conversion through the TypeConverter architecture.
    Classes that don't support this are serialized and stored with the
    mimetype set.

    The mimetype is used for serialized objects, and tells the
    ResXResourceReader how to depersist the object. This is currently not
    extensible. For a given mimetype the value must be set accordingly:

    Note - application/x-microsoft.net.object.binary.base64 is the format
    that the ResXResourceWriter will generate, however the reader can
    read any of the formats listed below.

    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <data name="NavAutomaticText" xml:space="preserve">
    <value>Automatic</value>
    <comment />
  </data>
  <data name="NavTaskOrchestrationText" xml:space="preserve">
    <value>Task Orchestration</value>
    <comment />
  </data>
  <data name="NavFiltersText" xml:space="preserve">
    <value>Filters</value>
    <comment />
  </data>
  <data name="Backup" xml:space="preserve">
    <value>Backup</value>
    <comment />
  </data>
  <data name="Settings" xml:space="preserve">
    <value>Settings</value>
    <comment />
  </data>
  <data name="SettingsPageControl.ModuleTitle" xml:space="preserve">
    <value>Automatic</value>
    <comment />
  </data>
  <data name="SettingsPageControl.ModuleDescription" xml:space="preserve">
    <value>The automation module can monitor changes to files and folders. Based on custom settings and associated file processing tasks, this module can automatically perform the corresponding actions.</value>
    <comment />
  </data>
  <data name="StartupExecutionCard.Header" xml:space="preserve">
    <value>On startup</value>
    <comment />
  </data>
  <data name="StartupExecutionCard.Description" xml:space="preserve">
    <value>EasyTidy Execute once at startup</value>
    <comment />
  </data>
  <data name="RegularTaskRunningCard.Header" xml:space="preserve">
    <value>Regular execution</value>
    <comment />
  </data>
  <data name="ScheduledExecutionCard.Header" xml:space="preserve">
    <value>According to schedule</value>
    <comment />
  </data>
  <data name="FileChangeDelay.Text" xml:space="preserve">
    <value>Delay：</value>
    <comment />
  </data>
  <data name="FileChangeSecond.Text" xml:space="preserve">
    <value>Second</value>
    <comment />
  </data>
  <data name="AutoAnalysisGlobal.Header" xml:space="preserve">
    <value>AutoAnalysis(Global)</value>
    <comment />
  </data>
  <data name="FileChange.Description" xml:space="preserve">
    <value>Automatic file processing options</value>
    <comment />
  </data>
  <data name="FileChangeCard.Header" xml:space="preserve">
    <value>When files change</value>
    <comment />
  </data>
  <data name="RegularTaskRunningCard.Description" xml:space="preserve">
    <value>Regularly execute according to the set time</value>
    <comment />
  </data>
  <data name="RegularTaskRunningBlock.Text" xml:space="preserve">
    <value>Every:</value>
    <comment />
  </data>
  <data name="ScheduledExecutionCard.Description" xml:space="preserve">
    <value>Perform periodic execution according to the set plan</value>
    <comment />
  </data>
  <data name="ConfigurationButton.Content" xml:space="preserve">
    <value>Configuration</value>
    <comment />
  </data>
  <data name="TaskAssociation.Header" xml:space="preserve">
    <value>Task association</value>
    <comment />
  </data>
  <data name="ConfigurationTask.Header" xml:space="preserve">
    <value>Configuration Task</value>
    <comment />
  </data>
  <data name="ConfigurationTask.Description" xml:space="preserve">
    <value>Associate the configured tasks with the global plan or configure them separately</value>
    <comment />
  </data>
  <data name="TaskSelection.Header" xml:space="preserve">
    <value>Task selection</value>
    <comment />
  </data>
  <data name="TaskButton.Content" xml:space="preserve">
    <value>Task force</value>
    <comment />
  </data>
  <data name="TaskGroup.Title" xml:space="preserve">
    <value>Select Task Group</value>
    <comment />
  </data>
  <data name="SingleTask.Content" xml:space="preserve">
    <value>Single Task</value>
    <comment />
  </data>
  <data name="SelectTask.Title" xml:space="preserve">
    <value>Select Task</value>
    <comment />
  </data>
  <data name="Separate.Content" xml:space="preserve">
    <value>Is it configured separately</value>
    <comment />
  </data>
  <data name="Customize.Content" xml:space="preserve">
    <value>Customize</value>
    <comment />
  </data>
  <data name="ResetButton.Content" xml:space="preserve">
    <value>Revoke configuration</value>
    <comment />
  </data>
  <data name="SaveButton.Content" xml:space="preserve">
    <value>Save Configuration</value>
    <comment />
  </data>
  <data name="TaskList.Title" xml:space="preserve">
    <value>Task list</value>
    <comment />
  </data>
  <data name="FileChangeBlock.Text" xml:space="preserve">
    <value>When files change</value>
    <comment />
  </data>
  <data name="RegularTaskRunningText.Text" xml:space="preserve">
    <value>Regular execution</value>
    <comment />
  </data>
  <data name="SelectTaskBlock.Text" xml:space="preserve">
    <value>Task selection：</value>
    <comment />
  </data>
  <data name="ScheduleText" xml:space="preserve">
    <value>schedule</value>
    <comment />
  </data>
  <data name="UpdateBlock.Text" xml:space="preserve">
    <value>Last Update Check</value>
    <comment />
  </data>
  <data name="CheckButton.Content" xml:space="preserve">
    <value>Check for New Version</value>
    <comment />
  </data>
  <data name="ReleaseNote.Content" xml:space="preserve">
    <value>Release Note</value>
    <comment />
  </data>
  <data name="DownloadButton.Content" xml:space="preserve">
    <value>Download Update</value>
    <comment />
  </data>
  <data name="CodeButton.Content" xml:space="preserve">
    <value>Source Code</value>
    <comment />
  </data>
  <data name="LinkBlock.Text" xml:space="preserve">
    <value>Related Links</value>
    <comment> </comment>
  </data>
  <data name="AboutUsSetting.Description" xml:space="preserve">
    <value>EasyTidy can automatically process and organize files and folders. It can filter files by various conditions such as name and directory. Supports manual and automatic execution. You can set delay, time interval or customize the execution cycle with CRON expression for easy and efficient file management.</value>
    <comment>EasyTidy can automatically process and organize files and folders. It can filter files by various conditions such as name and directory. Supports manual and automatic execution. You can set delay, time interval or customize the execution cycle with CRON expression for easy and efficient file management.</comment>
  </data>
  <data name="ThemeSettingsCard.Description" xml:space="preserve">
    <value>Select the theme that suits your mood and preference. You can choose from dark, light, or system themes.</value>
    <comment> </comment>
  </data>
  <data name="ThemeSettingsCard.Header" xml:space="preserve">
    <value>App theme</value>
    <comment> </comment>
  </data>
  <data name="Light.Content" xml:space="preserve">
    <value>Light</value>
    <comment> </comment>
  </data>
  <data name="Dark.Content" xml:space="preserve">
    <value>Dark</value>
    <comment> </comment>
  </data>
  <data name="Default.Content" xml:space="preserve">
    <value>Windows Default</value>
    <comment>Default</comment>
  </data>
  <data name="ColorSettingsCard.Description" xml:space="preserve">
    <value>Sync your app’s color with your Windows accent color. You can open the Windows accent color setting by clicking this card.</value>
  </data>
  <data name="ColorSettingsCard.Header" xml:space="preserve">
    <value>Accent color</value>
  </data>
  <data name="FilterSettingsControl.ModuleDescription" xml:space="preserve">
    <value>Easily add files that need to be filtered to achieve precise management of specific files. By adding file processing rules, you can customize the way files are processed to meet individual needs. At the same time, you can also use the powerful pattern matching function of regular expressions to further refine the filtering and processing logic of files, making file management more efficient and intelligent. Whether you want to exclude specific types of files or perform special processing on files that match specific patterns, you can easily do it here.</value>
  </data>
  <data name="FilterSettingsControl.ModuleTitle" xml:space="preserve">
    <value>Filter</value>
  </data>
  <data name="ThemeSettingPage.Description" xml:space="preserve">
    <value>Explore the different ways to customize the appearance and behavior of your app. You can change the material, theme, accent, and more options to suit your style and preference.</value>
  </data>
  <data name="ThemeSettingPage.Header" xml:space="preserve">
    <value>Behavior &amp; animation</value>
  </data>
  <data name="AppUpdateSetting.Description" xml:space="preserve">
    <value>Check for Updates</value>
  </data>
  <data name="AppUpdateSetting.Header" xml:space="preserve">
    <value>Check for Updates</value>
  </data>
  <data name="AboutUsSettingPage.Description" xml:space="preserve">
    <value>About EasyTidy and Developer</value>
  </data>
  <data name="AboutUsSettingPage.Header" xml:space="preserve">
    <value>About</value>
  </data>
  <data name="GeneralPageControl.ModuleDescription" xml:space="preserve">
    <value>EasyTidy is an open-source, professional file management tool designed to provide users with efficient and convenient file classification and organization solutions. Through custom settings, users can achieve various sorting methods such as automatic sorting, scheduled sorting, real-time sorting, and manual sorting to meet the file management needs in different scenarios. Used by the author ♥  make.</value>
  </data>
  <data name="GeneralPageControl.ModuleTitle" xml:space="preserve">
    <value>General</value>
  </data>
  <data name="AtLeastOneWord" xml:space="preserve">
    <value>At least one word</value>
  </data>
  <data name="YesStr" xml:space="preserve">
    <value>YES</value>
  </data>
  <data name="NoStr" xml:space="preserve">
    <value>NO</value>
  </data>
  <data name="AtLeastOneWordCaseSensitive" xml:space="preserve">
    <value>At least one word (case sensitive)</value>
  </data>
  <data name="AllWordsInAnyOrder" xml:space="preserve">
    <value>All words in a random order</value>
  </data>
  <data name="AllWordsInAnyOrderCaseSensitive" xml:space="preserve">
    <value>All words in arbitrary order (case sensitive)</value>
  </data>
  <data name="RegularExpression" xml:space="preserve">
    <value>regular expression</value>
  </data>
  <data name="StringText" xml:space="preserve">
    <value>String</value>
  </data>
  <data name="StringCaseSensitive" xml:space="preserve">
    <value>String (case sensitive)</value>
  </data>
  <data name="LocalBackText" xml:space="preserve">
    <value>Local backup</value>
  </data>
  <data name="WebDavText" xml:space="preserve">
    <value>WebDav</value>
  </data>
  <data name="SkipText" xml:space="preserve">
    <value>Skip</value>
  </data>
  <data name="OverrideText" xml:space="preserve">
    <value>Override</value>
  </data>
  <data name="OverwriteIfNewerText" xml:space="preserve">
    <value>Overwrite If Newer</value>
  </data>
  <data name="OverrideIfSizesDifferText" xml:space="preserve">
    <value>If the sizes are different, cover them</value>
  </data>
  <data name="ReNameAppendText" xml:space="preserve">
    <value>Rename(01)</value>
  </data>
  <data name="ReNameAddDateText" xml:space="preserve">
    <value>Rename - Current Date</value>
  </data>
  <data name="MoveText" xml:space="preserve">
    <value>Move</value>
  </data>
  <data name="CopyText" xml:space="preserve">
    <value>Copy</value>
  </data>
  <data name="DeleteText" xml:space="preserve">
    <value>Delete</value>
  </data>
  <data name="RenameText" xml:space="preserve">
    <value>Rename</value>
  </data>
  <data name="RecycleBinText" xml:space="preserve">
    <value>RecycleBin</value>
  </data>
  <data name="GreaterThanText" xml:space="preserve">
    <value>&gt;</value>
  </data>
  <data name="EqualToText" xml:space="preserve">
    <value>=</value>
  </data>
  <data name="LessThanText" xml:space="preserve">
    <value>&lt;</value>
  </data>
  <data name="ByteText" xml:space="preserve">
    <value>byte</value>
  </data>
  <data name="KilobyteText" xml:space="preserve">
    <value>KB</value>
  </data>
  <data name="MegabyteText" xml:space="preserve">
    <value>MB</value>
  </data>
  <data name="GigabyteText" xml:space="preserve">
    <value>GB</value>
  </data>
  <data name="SecondText" xml:space="preserve">
    <value>Second</value>
  </data>
  <data name="MinuteText" xml:space="preserve">
    <value>Minute</value>
  </data>
  <data name="HourText" xml:space="preserve">
    <value>Hour</value>
  </data>
  <data name="DayText" xml:space="preserve">
    <value>Day</value>
  </data>
  <data name="MonthText" xml:space="preserve">
    <value>Month</value>
  </data>
  <data name="YearText" xml:space="preserve">
    <value>Year</value>
  </data>
  <data name="AllText" xml:space="preserve">
    <value>ALL</value>
  </data>
  <data name="FileProcessing.Header" xml:space="preserve">
    <value>File processing</value>
  </data>
  <data name="FileProcessingCard.Header" xml:space="preserve">
    <value>Dealing with conflicts</value>
  </data>
  <data name="FileProcessingCard.Description" xml:space="preserve">
    <value>Options for automatic conflict resolution</value>
  </data>
  <data name="FileProcessingComboBox.PlaceholderText" xml:space="preserve">
    <value>Conflict handling methods</value>
  </data>
  <data name="ToastWithAvatarDescriptionText" xml:space="preserve">
    <value>Easytidy application is running</value>
  </data>
  <data name="RemindText" xml:space="preserve">
    <value>More reminder</value>
  </data>
  <data name="AddFilterSettingsCard.Header" xml:space="preserve">
    <value>Add filter</value>
  </data>
  <data name="AddFilterSettingsCard.Description" xml:space="preserve">
    <value>Add custom additional filters</value>
  </data>
  <data name="FilterButton.Content" xml:space="preserve">
    <value>Add filter</value>
  </data>
  <data name="FiltersListBlock.Text" xml:space="preserve">
    <value>Filter List</value>
  </data>
  <data name="AttributeBlock.Text" xml:space="preserve">
    <value>Attribute</value>
  </data>
  <data name="FilterNameBlock.Text" xml:space="preserve">
    <value>Filter Name</value>
  </data>
  <data name="FeaturesBlock.Text" xml:space="preserve">
    <value>Characteristics</value>
  </data>
  <data name="OtherBlock.Text" xml:space="preserve">
    <value>Other</value>
  </data>
  <data name="OperationBlock.Text" xml:space="preserve">
    <value>Operation</value>
  </data>
  <data name="EditButton.ToolTipService.ToolTip" xml:space="preserve">
    <value>Edit</value>
  </data>
  <data name="NavGeneralText" xml:space="preserve">
    <value>General</value>
  </data>
  <data name="DesktopText" xml:space="preserve">
    <value>Desktop</value>
  </data>
  <data name="ModifyText" xml:space="preserve">
    <value>Modify</value>
  </data>
  <data name="SaveText" xml:space="preserve">
    <value>Save</value>
  </data>
  <data name="CancelText" xml:space="preserve">
    <value>Cancel</value>
  </data>
  <data name="AdditionalText" xml:space="preserve">
    <value>Additional</value>
  </data>
  <data name="SaveSuccessfulText" xml:space="preserve">
    <value>Save Successful</value>
  </data>
  <data name="SaveFailedText" xml:space="preserve">
    <value>Save Failed</value>
  </data>
  <data name="CustomConfigurationText" xml:space="preserve">
    <value>Custom Configuration</value>
  </data>
  <data name="ModifySuccessfullyText" xml:space="preserve">
    <value>Modify Successfully</value>
  </data>
  <data name="ModificationFailedText" xml:space="preserve">
    <value>Modification Failed</value>
  </data>
  <data name="DeleteSuccessfulText" xml:space="preserve">
    <value>Delete Successful</value>
  </data>
  <data name="DeleteFailedText" xml:space="preserve">
    <value>Delete Failed</value>
  </data>
  <data name="ExecutionFailedText" xml:space="preserve">
    <value>Execution Failed</value>
  </data>
  <data name="DisabledSuccessfullyText" xml:space="preserve">
    <value>Disabled Successfully</value>
  </data>
  <data name="DisablingFailedText" xml:space="preserve">
    <value>Disabling Failed</value>
  </data>
  <data name="DialogFilterNameBlock.Text" xml:space="preserve">
    <value>Filter Name:</value>
  </data>
  <data name="DividerAttribute.Content" xml:space="preserve">
    <value>Attribute</value>
  </data>
  <data name="DialogFileSize.Content" xml:space="preserve">
    <value>File Size:</value>
  </data>
  <data name="DialogCreationTime.Content" xml:space="preserve">
    <value>Creation Time:</value>
  </data>
  <data name="DialogModifyTime.Content" xml:space="preserve">
    <value>Modify Time:</value>
  </data>
  <data name="DialogVisitTime.Content" xml:space="preserve">
    <value>Visit Time:</value>
  </data>
  <data name="DialogDividerCharacteristics.Content" xml:space="preserve">
    <value>Characteristics</value>
  </data>
  <data name="DialogArchive.Content" xml:space="preserve">
    <value>Archive:</value>
  </data>
  <data name="DialogHide.Content" xml:space="preserve">
    <value>Hidden:</value>
  </data>
  <data name="DialogReadonly.Content" xml:space="preserve">
    <value>Read only:</value>
  </data>
  <data name="DialogSystem.Content" xml:space="preserve">
    <value>System:</value>
  </data>
  <data name="DialogTemporary.Content" xml:space="preserve">
    <value>Temporary:</value>
  </data>
  <data name="DialogDividerOthers.Content" xml:space="preserve">
    <value>Others</value>
  </data>
  <data name="DialogIncludedFiles.Content" xml:space="preserve">
    <value>Included files:</value>
  </data>
  <data name="DialogFileContent.Content" xml:space="preserve">
    <value>File content:</value>
  </data>
  <data name="DeleteButton.ToolTipService.ToolTip" xml:space="preserve">
    <value>Delete</value>
  </data>
  <data name="DialogTaskGroupName.Text" xml:space="preserve">
    <value>Task Group Name:</value>
  </data>
  <data name="TaskGroupBox.PlaceholderText" xml:space="preserve">
    <value>Please enter or select</value>
  </data>
  <data name="DialogTaskName.Text" xml:space="preserve">
    <value>Task Name:</value>
  </data>
  <data name="TaskNameBoxPlaceholder.PlaceholderText" xml:space="preserve">
    <value>Please enter the task name</value>
  </data>
  <data name="DialogProcessingRules.Text" xml:space="preserve">
    <value>Processing Rules:</value>
  </data>
  <data name="DialogTaskRulePlaceholder.PlaceholderText" xml:space="preserve">
    <value>Please enter processing rules/regex</value>
  </data>
  <data name="DialogRuleButton.Content" xml:space="preserve">
    <value>Rule example</value>
  </data>
  <data name="DialogFilterButton.Content" xml:space="preserve">
    <value>Filter</value>
  </data>
  <data name="DialogOperatingMethod.Text" xml:space="preserve">
    <value>Mode of operation:</value>
  </data>
  <data name="DialogTaskOperateListPlaceholder.PlaceholderText" xml:space="preserve">
    <value>Please Select Operation Mode</value>
  </data>
  <data name="DialogSourceFolder.Text" xml:space="preserve">
    <value>Source folder:</value>
  </data>
  <data name="DialogSourcePlaceholder.PlaceholderText" xml:space="preserve">
    <value>Please select a folder, the default is the desktop</value>
  </data>
  <data name="DialogSourceButton.Content" xml:space="preserve">
    <value>Choice</value>
  </data>
  <data name="DiaalogShortcut.Content" xml:space="preserve">
    <value>Shortcut</value>
  </data>
  <data name="DialogTargetFolder.Text" xml:space="preserve">
    <value>Target Folder:</value>
  </data>
  <data name="DialogTargetPlaceholder.PlaceholderText" xml:space="preserve">
    <value>Choose or enter folder directly</value>
  </data>
  <data name="DialogTargetButton.Content" xml:space="preserve">
    <value>Choice:</value>
  </data>
  <data name="DialogTaskEnable.Text" xml:space="preserve">
    <value>Enable:</value>
  </data>
  <data name="DialogTaskGroup.PlaceholderText" xml:space="preserve">
    <value>Select group name</value>
  </data>
  <data name="DialogAtStartup.Text" xml:space="preserve">
    <value>EasyTidy Startup:</value>
  </data>
  <data name="DialogAsPlanned.Text" xml:space="preserve">
    <value>According to the plan</value>
  </data>
  <data name="DialogMinute.Text" xml:space="preserve">
    <value>Minute</value>
  </data>
  <data name="DialogHour.Text" xml:space="preserve">
    <value>Hour</value>
  </data>
  <data name="DialogWeek.Text" xml:space="preserve">
    <value>Which day of the week</value>
  </data>
  <data name="DialogDayOfWeekBlock.Text" xml:space="preserve">
    <value>(0=Sunday to 6=Saturday)</value>
  </data>
  <data name="DialogDayOfMonth.Text" xml:space="preserve">
    <value>Day of the Month</value>
  </data>
  <data name="DialogMonth.Text" xml:space="preserve">
    <value>Month</value>
  </data>
  <data name="DialogExpression.Text" xml:space="preserve">
    <value>CRON expression</value>
  </data>
  <data name="DialogNotice.Text" xml:space="preserve">
    <value>Support CRON expression, and CRON expression has higher priority than the values of the first five items</value>
  </data>
  <data name="DialogFirst.Text" xml:space="preserve">
    <value>It will run when the time unit matches the value below;</value>
  </data>
  <data name="DialogExplanation1.Text" xml:space="preserve">
    <value>(Empty String) Matches any value</value>
  </data>
  <data name="DialogExplanation2.Text" xml:space="preserve">
    <value>Val1, Val2, ..., ValN Match Value List</value>
  </data>
  <data name="DialogExplanation3.Text" xml:space="preserve">
    <value>Match values range from n1 to n2</value>
  </data>
  <data name="DialogExplanation4.Text" xml:space="preserve">
    <value>n1-n2/n3 matches the range n1 to n2 for step n3</value>
  </data>
  <data name="DialogExplanation5.Text" xml:space="preserve">
    <value>Example: Minutes=15 Hours=03 Month=3-10/3 Day of the week=1,3,5 Tasks will be at</value>
  </data>
  <data name="DialogExplanation6.Text" xml:space="preserve">
    <value>Runs at 3:15 AM on Mondays, Wednesdays, and Fridays in March, June, and September.</value>
  </data>
  <data name="GeneralSubFloderCard.Description" xml:space="preserve">
    <value>Process folders, but not scan inside folders</value>
  </data>
  <data name="GeneralSubFloderCard.Header" xml:space="preserve">
    <value>Subfolder</value>
  </data>
  <data name="GeneraIgnoreCard.Description" xml:space="preserve">
    <value>Ignore files that are currently in use by other applications</value>
  </data>
  <data name="GeneraIgnoreCard.Header" xml:space="preserve">
    <value>Files in use</value>
  </data>
  <data name="GeneralIrrelevantFilesCard.Description" xml:space="preserve">
    <value>Ignore irrelevant files or folders as well as system file folders</value>
  </data>
  <data name="GeneralIrrelevantFilesCard.Header" xml:space="preserve">
    <value>Irrelevant file</value>
  </data>
  <data name="GeneralEmptyFileCard.Description" xml:space="preserve">
    <value>Ignore files that size = 0 or empty folder</value>
  </data>
  <data name="GeneralEmptyFileCard.Header" xml:space="preserve">
    <value>Empty file</value>
  </data>
  <data name="GeneralHiddenFileCard.Description" xml:space="preserve">
    <value>Ignore hidden files</value>
  </data>
  <data name="GeneralHiddenFileCard.Header" xml:space="preserve">
    <value>Hidden files</value>
  </data>
  <data name="GeneralAppSettings.Header" xml:space="preserve">
    <value>App settings</value>
  </data>
  <data name="GeneralAutoStartCard.Description" xml:space="preserve">
    <value>Start EasyTidy at System Startup</value>
  </data>
  <data name="GeneralAutoStartCard.Header" xml:space="preserve">
    <value>Auto start</value>
  </data>
  <data name="GeneralCheckCard.Description" xml:space="preserve">
    <value>Check for updates at startup</value>
  </data>
  <data name="GeneralCheckCard.Header" xml:space="preserve">
    <value>Check for updates</value>
  </data>
  <data name="GeneralMinimizeCard.Description" xml:space="preserve">
    <value>Minimize to the notification area on startup</value>
  </data>
  <data name="GeneralMinimizeCard.Header" xml:space="preserve">
    <value>Minimize</value>
  </data>
  <data name="GeneralBack.Header" xml:space="preserve">
    <value>Backup/Restore</value>
  </data>
  <data name="GeneralBackCard.Description" xml:space="preserve">
    <value>If necessary, EasyTidy will automatically restart. Check the automatic backup to back up every time the software starts</value>
  </data>
  <data name="GeneralBackCard.Header" xml:space="preserve">
    <value>Backup and restore settings</value>
  </data>
  <data name="GeneralBackButton.Content" xml:space="preserve">
    <value>Backup</value>
  </data>
  <data name="GeneralRestoreButton.Content" xml:space="preserve">
    <value>Restore</value>
  </data>
  <data name="GeneralAutoBackup.Content" xml:space="preserve">
    <value>Auto backup</value>
  </data>
  <data name="GeneralLocationCard.Header" xml:space="preserve">
    <value>Location</value>
  </data>
  <data name="GeneralBackupMethod.PlaceholderText" xml:space="preserve">
    <value>Select Backup method</value>
  </data>
  <data name="GeneralAddress.Text" xml:space="preserve">
    <value>Address:</value>
  </data>
  <data name="GeneralUsername.Text" xml:space="preserve">
    <value>Username:</value>
  </data>
  <data name="GeneralPassword.Text" xml:space="preserve">
    <value>Password:</value>
  </data>
  <data name="GeneralBackupInformation.Header" xml:space="preserve">
    <value>Backup information</value>
  </data>
  <data name="GeneralStatus.Text" xml:space="preserve">
    <value>Status:</value>
  </data>
  <data name="GeneralRefresh.Text" xml:space="preserve">
    <value>Refresh</value>
  </data>
  <data name="GeneralFilename.Text" xml:space="preserve">
    <value>Filename:</value>
  </data>
  <data name="GeneralSourceComputer.Text" xml:space="preserve">
    <value>Source Computer:</value>
  </data>
  <data name="GeneralCreatedOn.Text" xml:space="preserve">
    <value>Created on:</value>
  </data>
  <data name="GeneralUseDocumentation.Text" xml:space="preserve">
    <value>Documentation</value>
  </data>
  <data name="GereralReport.Text" xml:space="preserve">
    <value>Report BUG</value>
  </data>
  <data name="GeneralRequestFeature.Text" xml:space="preserve">
    <value>Request Feature</value>
  </data>
</root>